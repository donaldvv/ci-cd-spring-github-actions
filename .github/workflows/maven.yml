# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI/CD for Spring Boot App with Maven

# on -> defines the event that triggers the workflow
on:
  push:
    branches:
      - dev
      - staging
      - prod
    #branches-ignore: ["prod"]
  pull_request:
    branches:
      - dev
      - staging
      - prod

jobs:
  # build-test -> defines the job name/ID
  build-test:
    permissions: write-all # allows the action to write to the repository (need it to update dependency graph)
    runs-on: ubuntu-latest

    steps:  # defines the sequence of tasks that the job will execute, actions to run, or linux commands to run
    - uses: actions/checkout@v4  # uses:  -> selects an action to run

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Execute Tests
      run: mvn -B test --file pom.xml

    - name: Build the app
      run: mvn -B package -DskipTests --file pom.xml

    - name: Get current date (Docker image tag)
      id: date
      run: echo "NOW=$(date -u +'%Y%m%dT%H%M%S')" >> $GITHUB_ENV

    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        # secrets are stored in the GitHub repository settings
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        tags: ${{ format('{0}-{1}', github.sha, env.NOW) }}
        image: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-spring-github-actions
        registry: docker.io
        dockerfile: Dockerfile

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

    # TODO: 1- get url, branch from corresponding environment
    #       2- Reuse workflows
  deploy-dev:
    name: Deploy to dev environment
    needs: build-test
    #  This line ensures the job only runs for the 'dev' branch and pull request do not trigger deployment
    if: github.ref == 'refs/heads/dev' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    # let's define the environment for which this job is intended - dev
    environment:
      name: dev
      url: https://example-dev.myapp.com # can be retrieved dynamically - just for visualization
    steps:
      - name: This was executed
        run: echo "Deploy Dev is running"
    # Now we would pull the image from docker hub and deploy it to the corresponding dev environment (which we can
    # define variables and secrets in the Environments for dev). With the chose image storing strat we would need to find docker image by tag: commitSHA-current_date
    #steps:
    #- uses: actions/checkout@v2
    ## Some more steps here ...
    #- name: Publish to Test PyPI
    # With env, we extract the variables or secrets of the environment defined above "dev", Here we could have AWS credentials etc.
    #  env:
    #    TWINE_USERNAME: "__token__"
    #    TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
    #    TWINE_REPOSITORY_URL: "https://test.pypi.org/legacy/"
    #  run: |
    #    echo KEY: '${TWINE_PASSWORD}'
    #    twine check dist/*
    #    twine upload --verbose --skip-existing dist/*

  deploy-staging:
    name: Deploy to staging environment
    needs: build-test
    if: github.ref == 'refs/heads/staging' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    # let's define the environment for which this job is intended - staging
    environment:
      name: staging
      url: http://example-staging.myapp.com
    steps:
      - name: This was executed
        run: echo "Deploy Staging is running"
      #- name: Pull Image from docker hub
      #  ...

  deploy-prod:
    name: Deploy to prod environment
    # depends on staging deployment - not realistic since if we push to prod, we are not triggering staging pipeline, but just for ilusttration
    needs: deploy-staging
    if: github.ref == 'refs/heads/prod' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: http://myapp.com
    steps:
      - name: This was executed
        run: echo "Deploy Prod is running"
      #- name: Pull Image from docker hub
      #  ...


  # Another job to deploy the app. It will be executed only if the build-test job is successful
  # FIXME: not correct
#  deploy:
#    needs: build-test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Pull Image from docker hub
#        # wrong tag btw: FIXME
#        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-spring-github-actions:${{ needs.build-test.outputs.date.NOW }}
#      - name: Delete old container
#        run: docker rm -f ci-cd-spring-github-actions
#      - name Run docker container
#        # tag is wrong: FIXME + port not dynamic
#        run docker run -d -p 8080:8080 --name ci-cd-spring-github-actions ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-spring-github-actions:${{ needs.build-test.outputs.date.NOW }}
